self: super:

let pkgs = self.pkgs;
in {
  buildCmDotnetModule = ({ name ? "${args.pname}-${args.version}", version ?
      "0.0.1"
      # The packages project file, which contains instructions on how to compile it. This can be an array of multiple project files as well.
    , projectFile ? ("src/" + args.name + "/" + args.name + ".fsproj")
    # The NuGet dependency file. This locks all NuGet dependency versions, as otherwise they cannot be deterministically fetched.
    # This can be generated by running the `passthru.fetch-deps` script.
    , ... }@args:
    pkgs.callPackage pkgs.buildDotnetModule args);

  buildPaketDotnetModule = with pkgs;
    ({ name ? "${args.pname}-${args.version}", pname ? name
        # The packages project file, which contains instructions on how to compile it. This can be an array of multiple project files as well.
      , projectFile ? ("src/" + args.name + "/" + args.name + ".fsproj")
      # The project file to run unit tests against. This is usually referenced in the regular project file, but sometimes it needs to be manually set.
      # It gets restored and build, but not installed. You may need to regenerate your nuget lockfile after setting this.
      , testProjectFile ? ""
        # The NuGet dependency file. This locks all NuGet dependency versions, as otherwise they cannot be deterministically fetched.
        # This can be generated by running the `passthru.fetch-deps` script.
      , nugetDeps ? ./nix + "/${args.name}" + ".deps.nix", ... }@args:
      (callPackage buildDotnetModule args).overrideAttrs
      (finalAttrs: previousAttrs: {
        passthru = previousAttrs.passthru // {
          # This is originally sourced from https://github.com/NixOS/nixpkgs/blob/master/pkgs/build-support/dotnet/build-dotnet-module/default.nix
          fetch-deps = let
            # Because this list is rather long its put in its own store path to maintain readability of the generated script
            exclusions = writeText "nuget-package-exclusions"
              (lib.concatStringsSep "\n"
                (previousAttrs.dotnet-sdk.passthru.packages {
                  fetchNuGet = attrs: pname;
                }));

            sdkDeps = mkNugetDeps {
              name = "dotnet-sdk-${previousAttrs.dotnet-sdk.version}-deps";
              nugetDeps = previousAttrs.dotnet-sdk.passthru.packages;
            };

          in writeShellScript "fetch-${pname}-deps" ''
            set -euo pipefail

            export PATH="${
              lib.makeBinPath [
                coreutils
                previousAttrs.dotnet-sdk
                (nuget-to-nix.override { inherit (previousAttrs.dotnet-sdk) ; })
              ]
            }"

            for arg in "$@"; do
                case "$arg" in
                    --keep-sources|-k)
                        keepSources=1
                        shift
                        ;;
                    --help|-h)
                        echo "usage: $0 [--keep-sources] [--help] <output path>"
                        echo "    <output path>   The path to write the lockfile to. A temporary file is used if this is not set"
                        echo "    --keep-sources  Dont remove temporary directories upon exit, useful for debugging"
                        echo "    --help          Show this help message"
                        exit
                        ;;
                esac
            done

            exitTrap() {
                test -n "''${ranTrap-}" && return
                ranTrap=1

                if test -n "''${keepSources-}"; then
                    echo -e "Path to the source: $src\nPath to the fake home: $HOME"
                else
                    rm -rf "$src" "$HOME"
                fi
                # Since mktemp is used this will be empty if the script didnt succesfully complete
                ! test -s "$depsFile" && rm -rf "$depsFile"
            }

            trap exitTrap EXIT INT TERM

            dotnetRestore() {
                local -r project="''${1-}"

                dotnet paket restore \
                    --project ''${project-}
            }

            declare -a projectFiles=( ${toString (lib.toList projectFile)} )
            declare -a testProjectFiles=( ${
              toString (lib.toList testProjectFile)
            } )

            export HOME=$(mktemp -td "${pname}-home-XXXXXX")
            export DOTNET_NOLOGO=1
            export DOTNET_CLI_TELEMETRY_OPTOUT=1

            depsFile="$(realpath "''${1:-$(mktemp -t "${pname}-deps-XXXXXX.nix")}")"
            mkdir -p "$HOME/nuget_pkgs"
            export NUGET_PACKAGES="$HOME/nuget_pkgs"

            storeSrc="${srcOnly args}"
            src="$(mktemp -td "${pname}-src-XXXXXX")"
            cp -rT "$storeSrc" "$src"
            chmod -R +w "$src"

            cd "$src"
            echo "Restoring project..."

            dotnet tool restore

            (( ''${#projectFiles[@]} == 0 )) && dotnetRestore ""


            for project in ''${projectFiles[@]-} ''${testProjectFiles[@]-}; do
                dotnetRestore "$project"
            done

            echo "Succesfully restored project"

            echo "Writing lockfile..."
            echo -e "# This file was automatically generated by passthru.fetch-deps.\n# Please dont edit it manually, your changes might get overwritten!\n" > "$depsFile"
            nuget-to-nix "$HOME/nuget_pkgs" "${exclusions}" >> "$depsFile"
            echo "Succesfully wrote lockfile to $depsFile"
          '';
        };
      }));
}
