set positional-arguments

db_dir := "db"
sqitch := "sqitch --chdir " + db_dir

default:
  @just --list

# Find a dotnet package and output the name and latest version
find-package-latest-version q:
  #!/usr/bin/env sh
  set -euo pipefail
  pkg=$(dotnet paket find-packages --silent --max 1 $1)
  ver=$(dotnet paket find-package-versions --silent --max 1 $1)
  echo $pkg $ver

# List all db targets
@db-targets:
  {{sqitch}} target

# Get the status of a db
@db-status TARGET:
  {{sqitch}} status {{TARGET}}

# Revert changes to a db
@db-revert TARGET:
  {{sqitch}} revert {{TARGET}}

# Deploy changes to a db
@db-deploy TARGET:
  {{sqitch}} deploy {{TARGET}}

# Create a db
db-create TARGET:
  #!/usr/bin/env bash
  set -euo pipefail
  cd {{db_dir}}
  uri=$(sqitch config --file sqitch.conf --get target.{{TARGET}}.uri | sed 's/.*://')
  mkdir -p $(dirname $uri)
  sqlite3 $uri "VACUUM;"

# Delete a db
db-delete TARGET:
  #!/usr/bin/env bash
  set -euo pipefail
  cd {{db_dir}}
  uri=$(sqitch config --file sqitch.conf --get target.{{TARGET}}.uri | sed 's/.*://')
  rm -f $uri
  registry=$(sqitch config --file sqitch.conf --get target.{{TARGET}}.registry)
  rm -f $(dirname $uri)/$registry

# Reset a db
@db-reset TARGET: (db-delete TARGET) (db-create TARGET) (db-deploy TARGET)

# Create a database migration
@db-migration-create TARGET NAME MESSAGE:
  {{sqitch}} add --change-name {{NAME}} --note '{{MESSAGE}}' {{TARGET}}

# Build docker image for an application
@build-image TARGET:
  docker build -f src/{{TARGET}}/Dockerfile -t {{lowercase(TARGET)}} .

@fly-graphql-schema:
  curl 'https://api.fly.io/graphql' \
    -H 'Accept-Encoding: gzip, deflate, br' \
    -H 'Content-Type: application/json' \
    -H 'Accept: application/json' \
    -H 'Connection: keep-alive' \
    -H 'DNT: 1' -H 'Origin: https://api.fly.io' \
    -H 'Fly-GraphQL-Client: playground' \
    -H 'Authorization: Bearer ${FLY_API_TOKEN}' \
    --data-binary '{"query":"query IntrospectionQuery {\n  __schema {\n    queryType {\n      name\n    }\n    mutationType {\n      name\n    }\n    subscriptionType {\n      name\n    }\n    types {\n      ...FullType\n    }\n    directives {\n      name\n      description\n      locations\n      args {\n        ...InputValue\n      }\n    }\n  }\n}\n\nfragment FullType on __Type {\n  kind\n  name\n  description\n  fields(includeDeprecated: true) {\n    name\n    description\n    args {\n      ...InputValue\n    }\n    type {\n      ...TypeRef\n    }\n    isDeprecated\n    deprecationReason\n  }\n  inputFields {\n    ...InputValue\n  }\n  interfaces {\n    ...TypeRef\n  }\n  enumValues(includeDeprecated: true) {\n    name\n    description\n    isDeprecated\n    deprecationReason\n  }\n  possibleTypes {\n    ...TypeRef\n  }\n}\n\nfragment InputValue on __InputValue {\n  name\n  description\n  type {\n    ...TypeRef\n  }\n  defaultValue\n}\n\nfragment TypeRef on __Type {\n  kind\n  name\n  ofType {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}","variables":{"appName":"capemay-test"}}' \
    --compressed
